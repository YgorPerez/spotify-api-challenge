import type {
  GetServerSideProps,
  GetServerSidePropsContext,
  InferGetServerSidePropsType,
  NextPage,
} from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import AlbumCard from '../../components/album-card'
import Footer from '../../components/footer'
import Header from '../../components/header'
import SearchForm from '../../components/search-form'
import { api } from '../../utils/api'
import { generateSSGHelper } from '../../utils/ssgHelper'

const SearchPage: NextPage = (
  props: InferGetServerSidePropsType<typeof getServerSideProps>,
) => {
  const router = useRouter()
  const { search: searchQuery = '' } = router.query
  const shouldFetch = searchQuery.length >= 1
  const albumCardPlaceholder = { albums: [{ album: null }] }
  for (let i = 1; i <= 7; i++) {
    albumCardPlaceholder.albums.push({ album: null })
  }
  const utils = api.useContext()
  const { data: spotifySearchData, isError } = api.spotify.getSearch.useQuery(
    {
      searchQuery: searchQuery as string,
    },
    {
      cacheTime: Infinity,
      enabled: shouldFetch,
      staleTime: Infinity,
      placeholderData: albumCardPlaceholder,
      onSuccess(searchSuccessdata) {
        // searchSuccessdata.albums?.map(album => {
        //   utils.spotify.getAlbumTracks.prefetch({ albumId: album.id })
        // })
        searchSuccessdata.tracks?.map(track => {
          utils.spotify.getTrack.setData({ trackId: track.id }, track)
        })
      },
    },
  )
  const shouldDisplayData = spotifySearchData && shouldFetch && !isError
  return (
    <>
      <Head>
        <title>Página de busca</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='bg-dark-gray'>
        <div className='min-h-[calc(100vh_-_4em_-_5px)]'>
          <Header />
          <main className='flex min-h-max flex-col'>
            <div>
              <div className='mx-32 mb-8'>
                <SearchForm search={searchQuery as string} />
                <h2 className='my-4 mt-14 text-3xl text-white-gray'>
                  Álbuns buscados recentemente
                </h2>
              </div>
              <div className='m-auto flex w-5/6 flex-wrap justify-center gap-6 bg-dark-gray 2xl:w-11/12 2xl:gap-12 '>
                {shouldDisplayData &&
                  spotifySearchData.albums?.map((album, index) => {
                    return (
                      <AlbumCard
                        key={album.id || index}
                        albumCardData={album}
                      />
                    )
                  })}
              </div>
            </div>
          </main>
        </div>
        <Footer />
      </div>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext,
) => {
  const { search: searchQuery = '' } = context.query
  const ssg = await generateSSGHelper(context)

  if (searchQuery?.length && searchQuery.length >= 1) {
    // `prefetch` does not return the result and never throws - if
    // you need that behavior, use `fetch` instead.
    await ssg.spotify.getSearch.prefetch({
      searchQuery: searchQuery as string,
    })
  }

  return {
    props: {
      // trpcState: ssg.dehydrate(),
    },
  }
}

export default SearchPage
