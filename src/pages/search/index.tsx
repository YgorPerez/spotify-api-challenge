import type {
  GetServerSideProps,
  GetServerSidePropsContext,
  NextPage,
} from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import Footer from '../../components/Footer'
import Header from '../../components/Header'
import SearchForm from '../../components/SearchForm'
import SpotifyCard from '../../components/SpotifyCard'
import useDebounce from '../../hooks/useDebounce'
import useGetSearch from '../../hooks/useGetSearch'
import { useScrollRestoration } from '../../hooks/useScrollRestoration'
import { generateSSGHelper } from '../../utils/ssgHelper'
import { stringOrNull } from '../../utils/stringOrNull'

const SearchPage: NextPage = () => {
  useScrollRestoration()
  const router = useRouter()

  const searchTerm = stringOrNull(router.query?.search)
  const debouncedSearchTerm = useDebounce(searchTerm, 500)

  const { data: spotifySearchData, isError } = useGetSearch({
    searchTerm: debouncedSearchTerm as string,
    enabled: Boolean(debouncedSearchTerm),
  })
  const shouldDisplayData = spotifySearchData && searchTerm && !isError

  return (
    <>
      <Head>
        <title>Página de busca</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='bg-dark-gray'>
        <div className='min-h-[calc(100vh_-_4em_-_5px)]'>
          <Header />
          <main className='flex min-h-max flex-col'>
            <div>
              <div className='mx-32 mb-8'>
                <SearchForm search={searchTerm} />
                <h2 className='my-4 mt-14 text-3xl text-white-gray'>
                  Álbuns buscados recentemente
                </h2>
              </div>
              <div className='m-auto flex w-5/6 flex-wrap justify-center gap-6 bg-dark-gray 2xl:w-11/12 2xl:gap-12 '>
                {shouldDisplayData &&
                  spotifySearchData?.albums?.map((album, index) => {
                    return (
                      <SpotifyCard key={album.id || index} cardData={album} />
                    )
                  })}
                {shouldDisplayData &&
                  spotifySearchData?.artists?.map((artist, index) => {
                    return (
                      <SpotifyCard key={artist.id || index} cardData={artist} />
                    )
                  })}
                {shouldDisplayData &&
                  spotifySearchData?.tracks?.map((track, index) => {
                    return (
                      <SpotifyCard key={track.id || index} cardData={track} />
                    )
                  })}
              </div>
            </div>
          </main>
        </div>
        <Footer />
      </div>
    </>
  )
}

export const runtime = 'experimental-edge'

export const getServerSideProps: GetServerSideProps = async (
  context: GetServerSidePropsContext,
) => {
  const searchTerm = stringOrNull(context.query.search)

  if (!searchTerm || searchTerm.length < 1) {
    return { props: {} }
  }

  const ssg = generateSSGHelper(context)
  await ssg.spotify.getSearch.prefetch({
    searchTerm: searchTerm,
  })

  return {
    props: {
      trpcState: ssg.dehydrate(),
    },
  }
}

export default SearchPage
